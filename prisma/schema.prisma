generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String        @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  accounts      Account[]
  appointments  Appointment[]
  sessions      Session[]
}

model Patient {
  id           String        @id @default(cuid())
  name         String
  phone        String
  email        String?
  birthDate    DateTime?
  notes        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  appointments Appointment[]

  @@map("patients")
}

model Appointment {
  id             String            @id @default(cuid())
  name           String
  phone          String
  date           DateTime
  time           String
  status         AppointmentStatus @default(waiting)
  notes          String?
  professionalId String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  patientId      String?
  patient        Patient?          @relation(fields: [patientId], references: [id])
  professional   User              @relation(fields: [professionalId], references: [id])

  @@map("appointments")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

enum AppointmentStatus {
  waiting
  attended
  cancelled
  no_show
}
